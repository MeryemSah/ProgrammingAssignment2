source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
setwd("C:/Users/Meryem/Desktop/Data")
pollutantmean("specdata", "nitrate", 70:72)
setwd("C:/Users/Meryem/Desktop/Data")
pollutantmean("specdata", "nitrate", 23)
setwd("C:/Users/Meryem/Desktop/Data")
ls
setwd("C:/Users/Meryem/Desktop/Data")
dir()
source("rprog_scripts_submitscript1.R")
source("rprog-scripts-submitscript1.R")
ls()
submit(manual = TRUE)
submit(manual = TRUE)
dir()
dir()
setwd("C:/Users/Meryem/Desktop/Data")
source("rprog-scripts-submitscript1.R")
submit(manual = TRUE)
setwd("C:/Users/Meryem/Desktop/Data")
source("rprog-scripts-submitscript1.R")
submit(manual = TRUE)
setwd("C:/Users/Meryem/Desktop/Data")
source("rprog-scripts-submitscript1.R")
submit(manual = TRUE)
setwd("C:/Users/Meryem/Desktop/Data")
source("complete.R")
complete("specdata", 1)
setwd("C:/Users/Meryem/Desktop/Data")
source("rprog-scripts-submitscript1.R")
submit(manual = TRUE)
setwd("C:/Users/Meryem/Desktop/Data")
source("rprog-scripts-submitscript1.R")
submit(manual = TRUE)
setwd("C:/Users/Meryem/Desktop/Data")
source("rprog-scripts-submitscript1.R")
submit(manual = TRUE)
source("rprog-scripts-submitscript1.R")
setwd("C:/Users/Meryem/Desktop/Data")
source("rprog-scripts-submitscript1.R")
submit(manual = TRUE)
setwd("C:/Users/Meryem/Desktop/Data")
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 150)
setwd("C:/Users/Meryem/Desktop/Data")
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 150)
setwd("C:/Users/Meryem/Desktop/Data")
setwd("C:/Users/Meryem/Desktop/Data")
source("rprog-scripts-submitscript1.R")
submit(manual = TRUE)
setwd("C:/Users/Meryem/Desktop/Data")
submit(manual = TRUE)
submit(manual = TRUE)
clear
setwd("C:\Users\Meryem\ProgrammingAssignment2")
setwd("C\Users\Meryem\ProgrammingAssignment2")
setwd("C:/Users/Meryem/ProgrammingAssignment2")
source("cachematrix.R")
invmatrix
makeCacheMatrix <- function(x = matrix()) {
invmatrix <- NULL
set <- function(y) {
x <<- y
invmatrix <<- NULL
}
get <- function() x
setinverse <- function(inv) invmatrix <<- inverse
getintervse <- function() invmatrix
list(set = get, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invmarix <- x$getinverse()
if(!is.null(invmarix)) {
message("getting cached data")
return(invmatrix)
}
data <- x$get()
invmatrix <- solve(data, ...)
x$setinverse(invmatrix)
invmatrix
}
invmatrix
